{
  "title": "Java Arrays Quiz -  Open-Ended 2",
  "questions": [
    {
      "question": "Question 1: Inventory Check [15 marks]<br><br>In a warehouse, a set of product IDs represents items stored. If any product ID appears more than once, it means there are multiple units of the same product. Write a Java program that takes a 1D array of integers representing product IDs and determines whether the list contains duplicates (a 'bag') or all unique items (a 'set').<br><br>Example: [1, 0, 5, 2, 4, 4] â†’ 'The array is a bag.'",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(int[] arr = {1,0,5,2,4,4}; boolean isSet = true; for(int i=0;i<arr.length;i++){ for(int j=i+1;j<arr.length;j++){ if(arr[i]==arr[j]){ isSet=false; break; } } } System.out.println(isSet ? \"The array is a set.\" : \"The array is a bag.\");)"
    },
    {
      "question": "Question 2: Major or Minor Diagonal [20 marks]<br><br>Given a square 2D array representing hours worked by employees, write a method to compare the sum of the major diagonal (top-left to bottom-right) with the minor diagonal (top-right to bottom-left) and display which sum is greater.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(void compareDiagonals(int[][] matrix){ int major=0, minor=0; int n=matrix.length; for(int i=0;i<n;i++){ major+=matrix[i][i]; minor+=matrix[i][n-1-i]; } System.out.println(major>minor ? \"Sum of major diagonal > sum of minor diagonal\" : \"Sum of minor diagonal >= sum of major diagonal\");})"
    },
    {
      "question": "Question 3: Doubloons [15 marks]<br><br>Write a method that accepts a string and determines whether every letter appears exactly twice (a 'doubloon'). Prompt the user to enter a string and display whether it is a doubloon.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(boolean isDoubloon(String s){ s=s.toLowerCase(); Map<Character,Integer> map=new HashMap<>(); for(char c:s.toCharArray()){ map.put(c,map.getOrDefault(c,0)+1); } for(int count:map.values()){ if(count!=2) return false; } return true; })"
    },
    {
      "question": "Question 4: Temperature Logger [10 marks]<br><br>A weather station stores daily temperature readings for a week in a 1D array. Write a Java program that finds the maximum and minimum temperature recorded during the week.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(int[] temps = {23,18,25,30,19,21,22}; int max=temps[0], min=temps[0]; for(int t:temps){ if(t>max) max=t; if(t<min) min=t; } System.out.println(\"Max: \"+max+\" Min: \"+min);)"
    },
    {
      "question": "Question 5: Customer Spending [15 marks]<br><br>An e-commerce store records the total amount spent by 10 customers in a 1D array. Write a program that calculates the total revenue generated by summing all the amounts.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(int[] spend={120,50,75,200,180,60,90,45,150,100}; int sum=0; for(int s:spend) sum+=s; System.out.println(\"Total Revenue: \"+sum);)"
    },
    {
      "question": "Question 6: Reverse Sales Order [15 marks]<br><br>A shop tracks the last 7 days of sales in a 1D array. Write a Java program to reverse the order of the sales data without using additional arrays.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(int[] sales={10,20,30,40,50,60,70}; for(int i=0,j=sales.length-1;i<j;i++,j--){ int temp=sales[i]; sales[i]=sales[j]; sales[j]=temp; })"
    },
    {
      "question": "Question 7: Seating Chart Diagonal Analysis [20 marks]<br><br>A classroom uses a 2D array to store student scores. The major diagonal runs top-left to bottom-right, and the minor diagonal runs top-right to bottom-left. Write a method that compares the sums of both diagonals and prints which sum is greater.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(void compareDiagonals(int[][] scores){ int major=0, minor=0; int n=scores.length; for(int i=0;i<n;i++){ major+=scores[i][i]; minor+=scores[i][n-1-i]; } System.out.println(major>minor ? \"Major diagonal sum is greater\" : \"Minor diagonal sum is greater\");})"
    },
    {
      "question": "Question 8: Rainfall Data [20 marks]<br><br>A city tracks rainfall amounts for 4 weeks in a 2D array where each row represents a week and each column a day. Write a program to calculate the total rainfall for each week and for each day.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(int[][] rain={{2,3,0,1},{1,0,4,2},{3,1,2,1},{0,2,1,3}}; for(int i=0;i<rain.length;i++){ int sumRow=0; for(int j=0;j<rain[i].length;j++){ sumRow+=rain[i][j]; } System.out.println(\"Week \"+(i+1)+\": \"+sumRow); } for(int j=0;j<rain[0].length;j++){ int sumCol=0; for(int i=0;i<rain.length;i++){ sumCol+=rain[i][j]; } System.out.println(\"Day \"+(j+1)+\": \"+sumCol); })"
    },
    {
      "question": "Question 9: Matrix Multiplication [25 marks]<br><br>A company has sales data from two regions stored in two 2D arrays (matrices). Write a Java program to multiply the two matrices to get combined sales performance.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(int[][] A={{1,2},{3,4}}; int[][] B={{5,6},{7,8}}; int[][] C=new int[2][2]; for(int i=0;i<2;i++){ for(int j=0;j<2;j++){ C[i][j]=0; for(int k=0;k<2;k++){ C[i][j]+=A[i][k]*B[k][j]; } } } )"
    },
    {
      "question": "Question 10: Word Frequency Analysis [30 marks]<br><br>A text document is represented as a 1D array of words. Write a Java program to count the frequency of each unique word and display the results.",
      "options": ["Open-ended"],
      "correctAnswer": -1,
      "solution": "(String[] words={\"apple\",\"banana\",\"apple\",\"orange\",\"banana\"}; Map<String,Integer> freq=new HashMap<>(); for(String w:words){ freq.put(w,freq.getOrDefault(w,0)+1); } System.out.println(freq);)"
    }
  ]
}
