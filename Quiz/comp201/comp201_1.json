{
  "title": "COMP201 - Test 1 Theory 2020",
  "questions": [
    {
      "question": "The priority of a PriorityQueue cannot be reversed once a PriorityQueue is created.",
      "options": ["True", "False"],
      "correctAnswer": 1
    },
    {
      "question": "java.util.HashSet implements the java.util.Queue interface.",
      "options": ["True", "False"],
      "correctAnswer": 1
    },
    {
      "question": "A PriorityQueue orders its elements according to their natural ordering using the Comparable interface even if a Comparator is specified.",
      "options": ["True", "False"],
      "correctAnswer": 1
    },
    {
      "question": "Methods in the Collections class are static.",
      "options": ["True", "False"],
      "correctAnswer": 0
    },
    {
      "question": "The HashSet is more efficient than the TreeSet if you do not want the elements in a set to be sorted.",
      "options": ["True", "False"],
      "correctAnswer": 0
    },
    {
      "question": "The dynamic programming approach is the process of solving subproblems and then combining the solutions of the subproblems to obtain an overall solution.",
      "options": ["True", "False"],
      "correctAnswer": 0
    },
    {
      "question": "A PriorityQueue orders its elements according to the Comparator if a Comparator is specified in the constructor.",
      "options": ["True", "False"],
      "correctAnswer": 0
    },
    {
      "question": "The TreeSet is unsorted, but the HashSet is sorted.",
      "options": ["True", "False"],
      "correctAnswer": 1
    },
    {
      "question": "java.util.LinkedHashSet implements the java.util.Queue interface.",
      "options": ["True", "False"],
      "correctAnswer": 1
    },
    {
      "question": "java.util.PriorityQueue implements the java.util.Queue interface.",
      "options": ["True", "False"],
      "correctAnswer": 0
    },
    {
      "question": "Which of the following statements is NOT true?",
      "options": [
        "A Comparator object contains the compare method that compares two objects.",
        "The Comparable interface contains the compareTo method with the signature public int compareTo(Object).",
        "The Comparator interface contains the compareTo method with the signature public int compareTo(Object, Object).",
        "A Comparable object can compare this object with the other object."
      ],
      "correctAnswer": 2
    },
    {
      "question": "O(1) is ________.",
      "options": ["linear time", "logarithmic time", "constant time", "log-linear time"],
      "correctAnswer": 2
    },
    {
      "question": "Suppose list1 is [1, 2, 5] and list2 is [2, 3, 6]. After list1.addAll(list2), list2 is _________.",
      "options": ["[1, 5]", "[2]", "[1, 2, 2, 3, 5, 6]", "[1, 2, 3, 5, 6]", "[2, 3, 6]"],
      "correctAnswer": 4
    },
    {
      "question": "The worst-time complexity for heap sort is _________.",
      "options": ["O(nlogn)", "O(n^2)", "O(n)", "O(logn)", "O(1)"],
      "correctAnswer": 0
    },
    {
      "question": "Which of the following is correct to perform the set intersection of two sets s1 and s2?",
      "options": ["s1.join(s2)", "s1.retainAll(s2)", "s1.intersect(s2)", "s1.intersection(s2)"],
      "correctAnswer": 1
    },
    {
      "question": "What does the following program display?<br><br><pre><code class=\"language-java\">TreeSet&lt;String&gt;&nbsp;set&nbsp;=&nbsp;new&nbsp;TreeSet&lt;&gt;();<br>set.add(\"Red\");<br>&nbsp;set.add(\"Yellow\");<br>&nbsp;set.add(\"Green\");&nbsp;<br>set.add(\"Blue\");<br>SortedSet&nbsp;temp&nbsp;=&nbsp;set.headSet(\"Purple\");<br>System.out.println(temp.first());</code></pre>",
      "options": ["Blue", "Green", "Red", "Purple", "Yellow"],
      "correctAnswer": 0
    },
    {
      "question": "Which of the data types below could be used to store elements in their natural order based on the compareTo method?",
      "options": ["TreeSet", "HashSet", "LinkedHashSet", "Collection", "Set"],
      "correctAnswer": 0
    },
    {
      "question": "Suppose set s1 is [1, 2, 5] and set s2 is [2, 3, 6]. After s1.addAll(s2), s2 is _________.",
      "options": ["[2, 3, 6]", "[1, 5]", "[2]", "[1, 2, 3, 5, 6]", "[1, 2, 2, 3, 5, 6]"],
      "correctAnswer": 0
    },
    {
      "question": "O(n) is ________.",
      "options": ["constant time", "log-linear time", "logarithmic time", "linear time"],
      "correctAnswer": 3
    },
    {
      "question": "What does the following PriorityQueue iteration display?<br><br><pre><code class=\"language-java\">PriorityQueue&lt;Integer&gt;&nbsp;queue&nbsp;=&nbsp;new&nbsp;<br>PriorityQueue&lt;&gt;(Arrays.asList(60,&nbsp;10,&nbsp;50,&nbsp;30,&nbsp;40,&nbsp;20));<br>for&nbsp;(int&nbsp;i&nbsp;:&nbsp;queue)&nbsp;System.out.print(i&nbsp;+&nbsp;\"&nbsp;\");</code></pre>",
      "options": ["10 20 30 40 50 60", "No guarantee of order", "60 50 40 30 20 10", "60 10 50 30 40 20"],
      "correctAnswer": 1
    },
    {
      "question": "Which data structure is best to store students in a soccer team with info like phone number, address, age?",
      "options": ["HashMap", "LinkedList", "ArrayList", "TreeMap", "HashSet"],
      "correctAnswer": 0
    },
    {
      "question": "What is the output of the following code comparing three sets with equals()?<br><br><pre><code class=\"language-java\">Set1&nbsp;=&nbsp;[Atlanta,&nbsp;Macon,&nbsp;Savanna],<br>Set2&nbsp;=&nbsp;[Atlanta,&nbsp;Macon,&nbsp;Savanna],<br>Set3&nbsp;=&nbsp;[Macon,&nbsp;Savanna,&nbsp;Atlanta]</code></pre>",
      "options": ["false false", "true true", "false true", "true false"],
      "correctAnswer": 1
    },
    {
      "question": "After inserting duplicate keys in a HashMap, what does key '123' map to?",
      "options": [
        "John Smith",
        "Runtime error because of duplicate keys",
        "Steve Yao",
        "Steve Yao is the key for 222",
        "John Smith is the key for 123"
      ],
      "correctAnswer": 2
    },
    {
      "question": "What is the output of this program?<br><br><pre><code class=\"language-java\">HashSet&nbsp;set&nbsp;=&nbsp;new&nbsp;HashSet&lt;&gt;();<br>set.add(new&nbsp;A());&nbsp;<br>set.add(new&nbsp;A());&nbsp;<br>set.add(new&nbsp;A());&nbsp;<br>set.add(new&nbsp;A());</code></pre>",
      "options": ["[1, 1]", "[1, 1, 1]", "[1, 1, 1, 1]", "[1]"],
      "correctAnswer": 2
    },
    {
      "question": "Which of the following statements is NOT true about collections?",
      "options": [
        "The Collection interface provides basic operations for collections.",
        "The AbstractCollection class provides full implementation of Collection.",
        "The Collection interface is the root interface for collection manipulation.",
        "All interfaces and classes in Collections are generics since JDK 1.5.",
        "Some methods in Collection throw UnsupportedOperationException if not implemented."
      ],
      "correctAnswer": 1
    },
    {
      "question": "The worst-time complexity for bubble sort is _____________",
      "options": ["O(n)", "O(1)", "O(nlogn)", "O(n^2)", "O(logn)"],
      "correctAnswer": 3
    },
    {
      "question": "Which structure is best if your program frequently checks if a student is in a soccer team?",
      "options": ["LinkedList", "ArrayList", "Vector", "Vector", "HashSet"],
      "correctAnswer": 4
    },
    {
      "question": "The iterator() method returns an instance of which interface?",
      "options": ["Collection", "Iterable", "Iterator", "ArrayList"],
      "correctAnswer": 2
    },
    {
      "question": "After first pass of bubble sort, list {2, 9, 5, 4, 8, 1} becomes:",
      "options": ["2, 5, 4, 8, 1, 9", "2, 1, 5, 4, 8, 9", "2, 9, 5, 4, 1, 8", "2, 5, 9, 4, 8, 1", "2, 9, 5, 4, 8, 1"],
      "correctAnswer": 0
    },
    {
      "question": "Suppose list1 = [Atlanta, Macon] and list2 = [Atlanta, Macon, Savannah]. Which is true?",
      "options": [
        "list1.contains(list2.get(2))",
        "list1.contains(list2)",
        "list2.contains(list1)",
        "list2.contains(list1.get(0))"
      ],
      "correctAnswer": 3
    },
    {
      "question": "Best structure for distinct numbers where order does not matter?",
      "options": ["ArrayList", "TreeSet", "LinkedList", "LinkedHashSet", "HashSet"],
      "correctAnswer": 4
    },
    {
      "question": "Which of the following does NOT implement Collection?",
      "options": ["Map", "LinkedList", "HashSet", "TreeSet", "ArrayList"],
      "correctAnswer": 0
    },
    {
      "question": "Which method gives the number of elements in a set or list named x?",
      "options": ["x.length()", "x.size()", "x.counts()", "x.sizes()", "x.count()"],
      "correctAnswer": 1
    },
    {
      "question": "What is the output of this program?<br><br><pre><code class=\"language-java\">ArrayList&lt;Integer&gt;&nbsp;list&nbsp;=&nbsp;new&nbsp;ArrayList&lt;&gt;();<br>list.add(1);&nbsp;<br>list.add(2);&nbsp;<br>list.add(3);&nbsp;<br>list.remove(2);<br>System.out.println(list);</code></pre>",
      "options": ["[2, 3]", "[1, 2, 3]", "[1, 2]", "[1, 3]", "[1]"],
      "correctAnswer": 2
    },
    {
      "question": "What does this TreeSet program display?<br><br><pre><code class=\"language-java\">TreeSet&lt;String&gt;&nbsp;set&nbsp;=&nbsp;new&nbsp;TreeSet&lt;&gt;();<br>set.add(\"Red\");&nbsp;<br>set.add(\"Green\");&nbsp;<br>set.add(\"Blue\");<br>System.out.println(set.first());</code></pre>",
      "options": ["Green", "Red", "Blue", "Compile error: first() not in Set", "Any of Red, Blue, or Green"],
      "correctAnswer": 3
    },
    {
      "question": "Best structure for distinct numbers in input order?",
      "options": ["ArrayList", "LinkedList", "LinkedHashSet", "TreeSet", "HashSet"],
      "correctAnswer": 2
    },
    {
      "question": "Which is correct for set union of s1 and s2?",
      "options": ["s1.add(s2)", "s1.union(s2)", "s1 + s2", "s1.addAll(s2)"],
      "correctAnswer": 3
    },
    {
      "question": "How do you obtain an iterator from a Collection c?",
      "options": ["c.iterable()", "c.iterator()", "c.getIterator()", "c.iterators()"],
      "correctAnswer": 1
    },
    {
      "question": "Partition of list {5, 2, 9, 3, 8, 4, 0, 1, 6, 7} with pivot=5 becomes:<br><br><pre><code class=\"language-java\">4&nbsp;2&nbsp;1&nbsp;3&nbsp;0&nbsp;5&nbsp;8&nbsp;9&nbsp;6&nbsp;7</code></pre>",
      "options": [
        "4 2 1 3 0 5 8 9 6 7",
        "4 2 3 0 1 5 6 7 9 8",
        "2 3 4 0 1 5 6 7 8 9",
        "5 2 9 3 8 4 0 1 6 7",
        "2 3 4 0 1 5 9 8 6 7"
      ],
      "correctAnswer": 0
    }
  ]
}
