{
    "title": "Primitive Counting in Sorting Algorithms",
    "questions": [
      {
        "question": "Count the primitive operations in the following Bubble Sort snippet (number of comparisons and swaps):<br/><code lang={\"java\"}><pre>for (int i = 0; i < n; i++) {\n   for (int j = 0; j < n - i - 1; j++) {\n      if (a[j] > a[j+1]) {\n         int temp = a[j];\n         a[j] = a[j+1];\n         a[j+1] = temp;\n      }\n   }\n}</pre></code>",
        "correctAnswer": 2,
        "options": ["T(n) = 2 + 3n", "T(n) = 4 + 5n", "T(n) = 3n^2 + 2n", "T(n) = n^2", "T(n) = 6n^2 + 4n"]
      },
      {
        "question": "Count primitive operations in the outer and inner loop of Insertion Sort:<br/><code lang={\"java\"}><pre>for (int i = 1; i < n; i++) {\n   int key = a[i];\n   int j = i - 1;\n   while (j >= 0 && a[j] > key) {\n      a[j+1] = a[j];\n      j = j - 1;\n   }\n   a[j+1] = key;\n}</pre></code>",
        "correctAnswer": 4,
        "options": ["T(n) = 2n", "T(n) = n^2", "T(n) = 3n^2 + 4n", "T(n) = 5n^2 + 2n", "T(n) = 4n^2 + 3n + 2"]
      },
      {
        "question": "Count the comparisons in Selection Sort inner loop:<br/><code lang={\"java\"}><pre>for (int i = 0; i < n - 1; i++) {\n   int min = i;\n   for (int j = i+1; j < n; j++) {\n      if (a[j] < a[min]) {\n         min = j;\n      }\n   }\n}</pre></code>",
        "correctAnswer": 1,
        "options": ["T(n) = n^2 + n", "T(n) = (n^2 - n)/2", "T(n) = 2n", "T(n) = n^2", "T(n) = 3n^2"]
      },
      {
        "question": "Count primitive steps in swapping inside Selection Sort:<br/><code lang={\"java\"}><pre>int temp = a[i];\na[i] = a[min];\na[min] = temp;</pre></code>",
        "correctAnswer": 0,
        "options": ["T(n) = 3", "T(n) = 2n", "T(n) = n + 1", "T(n) = 4", "T(n) = 3n"]
      },
      {
        "question": "Count operations in Merge procedure:<br/><code lang={\"java\"}><pre>while (i < n1 && j < n2) {\n   if (L[i] <= R[j]) {\n      a[k] = L[i];\n      i++;\n   } else {\n      a[k] = R[j];\n      j++;\n   }\n   k++;\n}</pre></code>",
        "correctAnswer": 3,
        "options": ["T(n) = n1*n2", "T(n) = n1 + n2", "T(n) = 3(n1+n2)", "T(n) = 5(n1+n2)", "T(n) = 2n"]
      },
      {
        "question": "Count primitive comparisons in Quick Sort partition:<br/><code lang={\"java\"}><pre>for (int j = low; j < high; j++) {\n   if (a[j] <= pivot) {\n      i++;\n      int temp = a[i];\n      a[i] = a[j];\n      a[j] = temp;\n   }\n}</pre></code>",
        "correctAnswer": 2,
        "options": ["T(n) = n^2", "T(n) = n + 2", "T(n) = 4n + 3", "T(n) = 2n", "T(n) = 5n"]
      },
      {
        "question": "Count operations in Heapify (single call):<br/><code lang={\"java\"}><pre>int largest = i;\nint l = 2*i + 1;\nint r = 2*i + 2;\nif (l < n && a[l] > a[largest]) largest = l;\nif (r < n && a[r] > a[largest]) largest = r;\nif (largest != i) {\n   int temp = a[i];\n   a[i] = a[largest];\n   a[largest] = temp;\n   heapify(a, n, largest);\n}</pre></code>",
        "correctAnswer": 4,
        "options": ["T(n) = 5", "T(n) = 2n", "T(n) = n^2", "T(n) = 6n", "T(n) = 7 + T(n/2)"]
      },
      {
        "question": "Count initialization operations in Counting Sort:<br/><code lang={\"java\"}><pre>for (int i = 0; i <= k; i++) {\n   count[i] = 0;\n}</pre></code>",
        "correctAnswer": 1,
        "options": ["T(n) = n", "T(n) = k + 1", "T(n) = 2k", "T(n) = k^2", "T(n) = n + k"]
      },
      {
        "question": "Count the loop operations for building frequency array in Counting Sort:<br/><code lang={\"java\"}><pre>for (int j = 0; j < n; j++) {\n   count[a[j]]++;\n}</pre></code>",
        "correctAnswer": 0,
        "options": ["T(n) = n", "T(n) = n + 1", "T(n) = 2n", "T(n) = n^2", "T(n) = n + k"]
      },
      {
        "question": "Count operations in Radix Sort digit loop:<br/><code lang={\"java\"}><pre>for (int exp = 1; max/exp > 0; exp *= 10) {\n   countingSort(a, n, exp);\n}</pre></code>",
        "correctAnswer": 4,
        "options": ["T(n) = n", "T(n) = n^2", "T(n) = log n", "T(n) = 2n", "T(n) = d * (n + k)"]
      },
      {
        "question": "Primitive counting of comparisons in Bubble Sort single pass:<br/><code lang={\"java\"}><pre>for (int j = 0; j < n-1; j++) {\n   if (a[j] > a[j+1]) {\n      swap(a[j], a[j+1]);\n   }\n}</pre></code>",
        "correctAnswer": 2,
        "options": ["T(n) = n", "T(n) = 2n", "T(n) = 3n", "T(n) = n^2", "T(n) = 4n"]
      },
      {
        "question": "Count the primitive steps in computing prefix sums in Counting Sort:<br/><code lang={\"java\"}><pre>for (int i = 1; i <= k; i++) {\n   count[i] += count[i-1];\n}</pre></code>",
        "correctAnswer": 1,
        "options": ["T(n) = n", "T(n) = k", "T(n) = 2k", "T(n) = k^2", "T(n) = log k"]
      },
      {
        "question": "Count operations in insertion of key during Insertion Sort:<br/><code lang={\"java\"}><pre>a[j+1] = key;</pre></code>",
        "correctAnswer": 0,
        "options": ["T(n) = 1", "T(n) = 2", "T(n) = n", "T(n) = n+1", "T(n) = n^2"]
      },
      {
        "question": "Count primitive operations in the outer loop of Bubble Sort:<br/><code lang={\"java\"}><pre>for (int i = 0; i < n; i++) {\n   // inner loop work\n}</pre></code>",
        "correctAnswer": 1,
        "options": ["T(n) = 1", "T(n) = n", "T(n) = 2n", "T(n) = n^2", "T(n) = log n"]
      },
      {
        "question": "Primitive operation counting for Quick Sort swap:<br/><code lang={\"java\"}><pre>int temp = a[i];\na[i] = a[j];\na[j] = temp;</pre></code>",
        "correctAnswer": 0,
        "options": ["T(n) = 3", "T(n) = 2", "T(n) = n", "T(n) = 4", "T(n) = n+2"]
      },
      {
        "question": "Count primitive steps for outer loop of Selection Sort:<br/><code lang={\"java\"}><pre>for (int i = 0; i < n - 1; i++) {\n   // inner loop work\n}</pre></code>",
        "correctAnswer": 1,
        "options": ["T(n) = 1", "T(n) = n-1", "T(n) = n", "T(n) = 2n", "T(n) = n^2"]
      },
      {
        "question": "Count primitive operations in Merge Sort recursive calls:<br/><code lang={\"java\"}><pre>mergeSort(a, l, m);\nmergeSort(a, m+1, r);\nmerge(a, l, m, r);\n</pre></code>",
        "correctAnswer": 2,
        "options": ["T(n) = n", "T(n) = log n", "T(n) = 2T(n/2) + cn", "T(n) = n^2", "T(n) = n+log n"]
      },
      {
        "question": "Count primitive comparisons in Heap Sort extraction:<br/><code lang={\"java\"}><pre>for (int i = n-1; i > 0; i--) {\n   int temp = a[0];\n   a[0] = a[i];\n   a[i] = temp;\n   heapify(a, i, 0);\n}</pre></code>",
        "correctAnswer": 2,
        "options": ["T(n) = n", "T(n) = log n", "T(n) = n log n", "T(n) = 3n", "T(n) = 4n"]
      },
      {
        "question": "Count primitive operations in Radix Sort loop per digit:<br/><code lang={\"java\"}><pre>for (int i = 0; i < n; i++) {\n   output[count[(a[i]/exp)%10] - 1] = a[i];\n   count[(a[i]/exp)%10]--;\n}</pre></code>",
        "correctAnswer": 4,
        "options": ["T(n) = 2n", "T(n) = 3n", "T(n) = n^2", "T(n) = log n", "T(n) = 5n"]
      },
      {
        "question": "Count operations in checking sortedness (Bubble Sort optimization):<br/><code lang={\"java\"}><pre>boolean swapped = false;\nfor (int j = 0; j < n-1; j++) {\n   if (a[j] > a[j+1]) {\n      swap(a[j], a[j+1]);\n      swapped = true;\n   }\n}\nif (!swapped) break;</pre></code>",
        "correctAnswer": 3,
        "options": ["T(n) = n", "T(n) = n+1", "T(n) = 2n", "T(n) = 3n + 2", "T(n) = n^2"]
      },
      {
        "question": "Primitive counting for one pass of Insertion Sort inner while loop:<br/><code lang={\"java\"}><pre>while (j >= 0 && a[j] > key) {\n   a[j+1] = a[j];\n   j = j - 1;\n}</pre></code>",
        "correctAnswer": 2,
        "options": ["T(n) = n", "T(n) = 2n", "T(n) = 3n", "T(n) = n^2", "T(n) = log n"]
      },
      {
        "question": "Primitive counting in outer loop of Heap construction:<br/><code lang={\"java\"}><pre>for (int i = n/2 - 1; i >= 0; i--) {\n   heapify(a, n, i);\n}</pre></code>",
        "correctAnswer": 1,
        "options": ["T(n) = n", "T(n) = n/2", "T(n) = log n", "T(n) = n^2", "T(n) = 2n"]
      },
      {
        "question": "Count primitive steps for a single swap function:<br/><code lang={\"java\"}><pre>void swap(int[] a, int i, int j) {\n   int temp = a[i];\n   a[i] = a[j];\n   a[j] = temp;\n}</pre></code>",
        "correctAnswer": 0,
        "options": ["T(n) = 3", "T(n) = 4", "T(n) = n", "T(n) = 2n", "T(n) = 3n"]
      },
      {
        "question": "Primitive operation count in outer Quick Sort recursive call:<br/><code lang={\"java\"}><pre>quickSort(a, low, pi - 1);\nquickSort(a, pi + 1, high);\n</pre></code>",
        "correctAnswer": 2,
        "options": ["T(n) = n", "T(n) = log n", "T(n) = T(k) + T(n-k-1) + cn", "T(n) = n^2", "T(n) = n log n"]
      }
    ]
  }
  