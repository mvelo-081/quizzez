{
    "title": "Understanding JCF diagram v2",
    "questions": [
      {
        "question": "Which interface is the root of the Collection hierarchy?",
        "correctAnswer": 2,
        "options": ["List", "Set", "Collection", "Map", "Queue"]
      },
      {
        "question": "Which interface is not part of the Collection hierarchy?",
        "correctAnswer": 1,
        "options": ["List", "Map", "Set", "Queue", "Deque"]
      },
      {
        "question": "Which class provides a resizable array implementation of the List interface?",
        "correctAnswer": 3,
        "options": ["Vector", "LinkedList", "Stack", "ArrayList", "TreeSet"]
      },
      {
        "question": "Which class is synchronized by default?",
        "correctAnswer": 4,
        "options": ["HashSet", "ArrayList", "LinkedList", "TreeSet", "Vector"]
      },
      {
        "question": "Which class extends Vector?",
        "correctAnswer": 2,
        "options": ["PriorityQueue", "TreeSet", "Stack", "LinkedHashSet", "ArrayList"]
      },
      {
        "question": "Which class implements both List and Deque interfaces?",
        "correctAnswer": 1,
        "options": ["PriorityQueue", "LinkedList", "TreeMap", "ArrayList", "Vector"]
      },
      {
        "question": "Which interface guarantees unique elements but does not maintain insertion order?",
        "correctAnswer": 3,
        "options": ["Queue", "List", "Deque", "Set", "Map"]
      },
      {
        "question": "Which Set implementation maintains insertion order?",
        "correctAnswer": 4,
        "options": ["TreeSet", "EnumSet", "PriorityQueue", "HashSet", "LinkedHashSet"]
      },
      {
        "question": "Which Set implementation stores elements in sorted order?",
        "correctAnswer": 0,
        "options": ["TreeSet", "HashSet", "LinkedHashSet", "Stack", "ArrayList"]
      },
      {
        "question": "Which class provides a high-performance implementation of Set backed by a hash table?",
        "correctAnswer": 2,
        "options": ["Vector", "LinkedList", "HashSet", "TreeSet", "PriorityQueue"]
      },
      {
        "question": "Which class is a specialized Set implementation for enum constants?",
        "correctAnswer": 1,
        "options": ["HashSet", "EnumSet", "TreeSet", "LinkedHashSet", "Properties"]
      },
      {
        "question": "Which abstract class provides a skeletal implementation for collections?",
        "correctAnswer": 2,
        "options": ["AbstractList", "AbstractSet", "AbstractCollection", "AbstractQueue", "AbstractMap"]
      },
      {
        "question": "Which abstract class provides a skeletal implementation for the List interface?",
        "correctAnswer": 4,
        "options": ["AbstractQueue", "AbstractSet", "AbstractCollection", "AbstractSequentialList", "AbstractList"]
      },
      {
        "question": "Which abstract class provides a skeletal implementation for the Set interface?",
        "correctAnswer": 0,
        "options": ["AbstractSet", "AbstractList", "AbstractCollection", "AbstractQueue", "AbstractMap"]
      },
      {
        "question": "Which abstract class provides a skeletal implementation for the Queue interface?",
        "correctAnswer": 3,
        "options": ["AbstractSet", "AbstractList", "AbstractSequentialList", "AbstractQueue", "AbstractCollection"]
      },
      {
        "question": "Which interface extends Queue to support double-ended queues?",
        "correctAnswer": 1,
        "options": ["Queue", "Deque", "Set", "List", "Map"]
      },
      {
        "question": "Which class implements a priority-based queue?",
        "correctAnswer": 0,
        "options": ["PriorityQueue", "LinkedList", "ArrayList", "Stack", "TreeSet"]
      },
      {
        "question": "Which interface guarantees unique keys and maps them to values?",
        "correctAnswer": 3,
        "options": ["Queue", "Collection", "List", "Map", "Set"]
      },
      {
        "question": "Which Map implementation allows null keys and values?",
        "correctAnswer": 2,
        "options": ["TreeMap", "IdentityHashMap", "HashMap", "Hashtable", "Properties"]
      },
      {
        "question": "Which Map implementation does not allow null keys or values and is synchronized?",
        "correctAnswer": 3,
        "options": ["TreeMap", "WeakHashMap", "HashMap", "Hashtable", "LinkedHashMap"]
      },
      {
        "question": "Which Map implementation maintains insertion order?",
        "correctAnswer": 1,
        "options": ["WeakHashMap", "LinkedHashMap", "TreeMap", "IdentityHashMap", "HashMap"]
      },
      {
        "question": "Which Map implementation stores keys in natural ordering?",
        "correctAnswer": 2,
        "options": ["Properties", "Hashtable", "TreeMap", "HashMap", "LinkedHashMap"]
      },
      {
        "question": "Which Map implementation uses weak references for keys?",
        "correctAnswer": 0,
        "options": ["WeakHashMap", "HashMap", "TreeMap", "Hashtable", "LinkedHashMap"]
      },
      {
        "question": "Which Map implementation is used for maintaining system properties?",
        "correctAnswer": 4,
        "options": ["HashMap", "Hashtable", "TreeMap", "IdentityHashMap", "Properties"]
      },
      {
        "question": "Which Map implementation compares keys using object reference equality (==)?",
        "correctAnswer": 2,
        "options": ["TreeMap", "HashMap", "IdentityHashMap", "WeakHashMap", "LinkedHashMap"]
      }
    ]
  }
  